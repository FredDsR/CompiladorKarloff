PARSER_BEGIN(Karloff)
import java.io.*;
import java.util.ArrayList;

class Tipo {
  String tipo;

  Tipo(String tipo){
    this.tipo = tipo;
  }

  public String toString() {
    return this.tipo;
  }
}

class Fator {}

class True extends Fator {
  String value = "True";

  public String toString() {
    return this.value;
  }
}

class False extends Fator {
  String value = "False";

  public String toString() {
    return this.value;
  }
}

class Num extends Fator {
  String num;

  Num(String num) {
    this.num = num;
  }

  public String toString() {
    return this.num;
  }
}

class Variavel extends Fator{
  String id;

  Variavel(String id){
    this.id = id;
  }

  public String toString() {
    return this.id;
  }
}

class FuncaoCall extends Fator{
  String id;
  ArrayList<Expressao> listaExp;

  FuncaoCall(String id, ArrayList<Expressao> listaExp){
    this.id = id;
    this.listaExp = listaExp;
  }

  public String toString() {
    String bloco = this.id + "(";
    
    if (!this.listaExp.isEmpty()) {
      
      Expressao first = this.listaExp.remove(0);
      bloco = bloco.concat(first.toString());
      
      for (Expressao exp : this.listaExp) {
        bloco = bloco.concat("," + exp.toString());
      }

      listaExp.add(0, first);
    }

    bloco = bloco + ")";

    return bloco;
  }
}

class Operador {
  String op;

  Operador(String op){
    this.op = op;
  }

  public String toString() {
    switch (this.op) {
      case "&":
        return "and";
      case "|":
        return "or";
      default:
        return this.op;
    }
  }
}

class Expressao {}

class Operacao extends Expressao {
  Operador operador;
  Expressao expEsq,expDir;

  Operacao(Operador operador, Expressao expEsq, Expressao expDir){
    this.operador = operador;
    this.expEsq = expEsq;
    this.expDir = expDir;
  }

  public String toString() {
    return this.expEsq.toString() + " " + this.operador.toString() + " " + this.expDir.toString();
  }
}

class FinalExpressao extends Expressao {
  Fator fator;

  FinalExpressao(Fator fator){
    this.fator = fator;
  }

  public String toString() {
    return this.fator.toString();
  }
}

class Comando {
  int indent = 0;

  public void setIndent(int indent){
    this.indent = indent;
  }

  public int getIndent() {
    return indent;
  }

  public String getTabs() {
    String tabs = "";
    
    for (int i = 0; i < this.indent; i++){
      tabs = tabs.concat("\t");
    }

    return tabs;
  }
}

class Atrib extends Comando {
  String id;
}

class AtribExp extends Atrib {
  Expressao exp;

  AtribExp(String id, Expressao exp) {
    this.id = id;
    this.exp = exp;
  }

  public String toString() {
    return this.getTabs() + this.id + " = " + this.exp.toString() + "\n";
  }
}

class AtribInput extends Atrib {
  AtribInput(String id) {
    this.id = id;
  }

  public String toString() {
    return this.getTabs() + this.id + " = int(input())\n";
  }
}

class If extends Comando {
  Expressao teste;
  ArrayList<Comando> comandos;

  If(Expressao teste, ArrayList<Comando> comandos){
    this.teste = teste;
    this.comandos = comandos;
  }

  public String toString() {
    
    String bloco = this.getTabs() + "if " + this.teste.toString() + ":\n";

    for (Comando comando : this.comandos) {
      comando.setIndent(this.getIndent() + 1);
      bloco = bloco.concat(comando.toString());
    }

    if (!bloco.endsWith("\n")){
      bloco = bloco + "\n";
    }

    return bloco;
  }
}

class While extends Comando {
  Expressao teste;
  ArrayList<Comando> comandos;

  While(Expressao teste, ArrayList<Comando> comandos){
    this.teste = teste;
    this.comandos = comandos;
  }

  public String toString() {
    String bloco = this.getTabs() + "while " + this.teste.toString() + ":\n";

    for (Comando comando : this.comandos) {
      comando.setIndent(this.getIndent() + 1);
      bloco = bloco.concat(comando.toString());
    }

    if (!bloco.endsWith("\n")){
      bloco = bloco + "\n";
    }

    return bloco;
  }
}

class Repeat extends Comando {
  Expressao teste;
  ArrayList<Comando> comandos;

  Repeat(Expressao teste, ArrayList<Comando> comandos){
    this.teste = teste;
    this.comandos = comandos;
  }
  
  public String toString() {
    String bloco = this.getTabs() + "while not " + this.teste.toString() + ":\n";
    
    for (Comando comando : this.comandos) {
      comando.setIndent(this.getIndent() + 1);
      bloco = bloco.concat(comando.toString());
    }

    if (!bloco.endsWith("\n")){
      bloco = bloco + "\n";
    }

    return bloco;
  }
}

class Return extends Comando {
  Expressao exp;

  Return(Expressao exp){
    this.exp = exp;
  }

  public String toString() {
    return this.getTabs() + "return " + this.exp.toString() + "\n";
  }
}

class Print extends Comando {
  Expressao exp;

  Print(Expressao exp){
    this.exp = exp;
  }

  public String toString() {
    return this.getTabs() + "print(" + this.exp.toString() + ")\n";
  }
}

class FuncaoCallCom extends Comando {
  FuncaoCall funcaoCall;

  FuncaoCallCom(FuncaoCall funcaoCall){
    this.funcaoCall = funcaoCall;
  }

  public String toString() {
    return this.getTabs() + this.funcaoCall.toString() + "\n";
  }
}

class Main {
  ArrayList<Variavel> variaveis;
  ArrayList<Comando> comandos;

  Main(ArrayList<Variavel> variaveis, ArrayList<Comando> comandos){
    this.variaveis = variaveis;
    this.comandos = comandos;
  }

  public String toString() {
    String bloco = "def main() -> None:\n";
    
    for (Comando comando : this.comandos) {
      comando.setIndent(1);
      bloco = bloco.concat(comando.toString());
    }
    
    if (!bloco.endsWith("\n")){
      bloco = bloco + "\n";
    }

    return bloco;
  }
}

class Argumento {
  String nome;
  Tipo tipo;

  Argumento(String nome, Tipo tipo){
    this.nome = nome;
    this.tipo = tipo;
  }

  public String toString() {
    return this.nome.toString() + ": " + tipo.toString();
  }
}

class Funcao {
  String nome;
  Tipo tipo_retorno;
  ArrayList<Argumento> argumentos;
  ArrayList<Variavel> variaveis;
  ArrayList<Comando> comandos;

  Funcao(String nome, Tipo tipo_retorno, ArrayList<Argumento> argumentos, ArrayList<Variavel> variaveis, ArrayList<Comando> comandos){
    this.nome = nome;
    this.tipo_retorno = tipo_retorno;
    this.argumentos = argumentos;
    this.variaveis = variaveis;
    this.comandos = comandos;
  }

  public String toString() {
    String bloco = "def " + this.nome + "(";

    if (!this.argumentos.isEmpty()) {
      
      Argumento first = this.argumentos.remove(0);
      bloco = bloco.concat(first.toString());
      
      for (Argumento argumento : this.argumentos) {
        bloco = bloco.concat("," + argumento.toString());
      }

      argumentos.add(0, first);
    }

    bloco = bloco.concat(") -> " + this.tipo_retorno.toString() + ":\n");

    for (Comando comando : this.comandos) {
      comando.setIndent(1);
      bloco = bloco.concat(comando.toString());
    }

    if (!bloco.endsWith("\n")){
      bloco = bloco + "\n";
    }
    
    return bloco;
  }
}

class ArvoreKarloff {
  Main main;
  ArrayList<Funcao> funcoes;

  ArvoreKarloff(Main main, ArrayList<Funcao> funcoes) {
    this.main = main;
    this.funcoes = funcoes;
  }

  public String toString() {
    String bloco = "#!/usr/bin python3\n\n" + this.main.toString() + "\n";
    
    for (Funcao funcao : this.funcoes) {
      bloco = bloco.concat(funcao.toString() + "\n");
    }

    bloco = bloco + "if __name__ == \"__main__\":\n\tmain()\n";
    
    return bloco;
  }
}

public class Karloff {
  public static void main(String args[]) throws Exception {
    FileInputStream fs;
    String filename = "scripts/script.py";
    
    switch (args.length) {
      case 0:
        throw new Exception("There is no enough params. Template: java Karloff <source_filename.kar> <target_filename.py>");
      case 1:
        fs = new FileInputStream(new File(args[0]));
        break;
      case 2:
        fs = new FileInputStream(new File(args[0]));
        filename = new String(args[1]);
        break;
      default:
        throw new Exception("Too much params. Template: java Karloff <source_filename.kar> <target_filename.py>");
    }
    
    Karloff parser = new Karloff(fs);

    ArvoreKarloff arvore = parser.Karloff();

    geraCodigo(arvore, filename);
  }

  public static void geraCodigo(ArvoreKarloff prog, String filename) throws Exception {
    File file = new File(filename);
    
    boolean result;  

    result = file.createNewFile();
    
    if(result) {  
      System.out.println("file created " + file.getCanonicalPath());
    } else  {  
      System.out.println("File already exist at location: " + file.getCanonicalPath());  
    }  

    FileOutputStream outputStream = new FileOutputStream(file);
    outputStream.write(prog.toString().getBytes());
  }
}

PARSER_END(Karloff)

SKIP :
{

  " "
| "\t"
| "\n"
| "\r"

}

TOKEN :
{

  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <VOID: "void">
| <APAR: "(">
| <FPAR: ")">
| <NEWVAR: "newVar">
| <SEMICOLON: ";">
| <COMMA: ",">
| <TINT: "integer">
| <TBOOL: "bool">
| <CATRIB: "=">
| <CIF: "if">
| <CTHEN: "then">
| <CWHILE: "while">
| <CREP: "repeat">
| <CUNT: "until">
| <CRET: "return">
| <CPRINT: "System.output">
| <CREADINT: "System.readint">
| <BTRUE: "true">
| <BFALSE: "false">
| <FUNC: "func">

}

TOKEN :
{

  <OP: "+" | "-" | "*"| "/" | "&" | "|" | "<" | ">" | "==">
| <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_" (["a"-"z","A"-"Z","0"-"9"])+)*>          
| <NUM: (["0"-"9"])+ ( "." (["0"-"9"])+ )? ("E" ("+"|"-")? (["0"-"9"])+)?>

}


// KARLOFF -> MAIN FUNC?
ArvoreKarloff Karloff () :
{
  Main main; 
  ArrayList<Funcao> funcoes = new ArrayList();
}
{

  main=MainC() Func(funcoes) <EOF>
  {return new ArvoreKarloff(main, funcoes);}
}

// MAIN -> "void" "main" "(" ")" "{" VARDECL SEQCOMANDOS "}"
Main MainC () : 
{
  ArrayList<Variavel> variaveis = new ArrayList();
  ArrayList<Comando> comandos = new ArrayList();
}
{

  <VOID> <MAIN> <APAR> <FPAR> <ACHAVES> VarDecl(variaveis) SeqComandos(comandos) <FCHAVES>
  {
    return new Main(variaveis, comandos);
  }
}

// VARDECL -> VARDECL "newVar" TIPO TOKEN_id ";" | vazio
void VarDecl (ArrayList<Variavel> variaveis) :
{
  Token t;
}
{

  (<NEWVAR> Tipo() t=<ID> {variaveis.add(new Variavel(t.image));} <SEMICOLON>)*

}

// TIPO -> "integer" | "bool"
Tipo Tipo() :
{}
{

  <TBOOL> {return new Tipo("bool");}| <TINT> {return new Tipo("int");} 

}

// SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
void SeqComandos (ArrayList<Comando> comandos) :
{
  Comando c;
}
{

  (c=Comando() {comandos.add(c);} <SEMICOLON>)*

}

// COMANDO -> TOKEN_id "=" EXP ";"
// | TOKEN_id "(" LISTAEXP? ")" ";"
// | "if" "(" EXP ")" "then" "{" SEQCOMANDOS "}" ";"
// | "while" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
// | "repeat" "{" SEQCOMANDOS "}" "until" "(" EXP ")"
// | "return" EXP ";"
// | "System.output" "(" EXP ")" ";"
// | TOKEN_id "=" "System.readint" "(" ")" ";"
Comando Comando () :
{
  Token t;
  Comando c;
  Expressao teste;
  Expressao exp;
  ArrayList<Comando> comandos = new ArrayList();
}
{
    t=<ID> c=ComID(t)
    {return c;}
  | <CIF> <APAR> teste=Exp() <FPAR> <CTHEN> <ACHAVES> SeqComandos(comandos) <FCHAVES>
    {return new If(teste, comandos);}
  | <CWHILE> <APAR> teste=Exp() <FPAR> <ACHAVES> SeqComandos(comandos) <FCHAVES>
    {return new While(teste, comandos);}
  | <CREP> <ACHAVES> SeqComandos(comandos) <FCHAVES> <CUNT> <APAR> teste=Exp() <FPAR>
    {return new Repeat(teste, comandos);}
  | <CRET> exp=Exp() 
    {return new Return(exp);}
  | <CPRINT> <APAR> exp=Exp() <FPAR> 
    {return new Print(exp);}

}

Comando ComID (Token t) :
{
  Comando c;
  ArrayList<Expressao> listaExp = new ArrayList();
}
{
    <CATRIB> c=ComIDAtrib(t)
    {return c;}
  | <APAR> ListaExp(listaExp) <FPAR>
    {return new FuncaoCallCom(new FuncaoCall(t.image, listaExp));}
}

Comando ComIDAtrib (Token t) :
{
  Expressao exp;
}
{
    exp=Exp()
    {return new AtribExp(t.image, exp);}
  | <CREADINT> <APAR> <FPAR> {return new AtribInput(t.image);}

}

// EXP -> "(" EXP OP EXP ")" | FATOR
Expressao Exp () :
{
  Expressao expEsq, expDir;
  Operador op;
  Fator f;
}
{
    <APAR> expEsq=Exp() op=Op() expDir=Exp() <FPAR> 
    {return new Operacao(op, expEsq, expDir);}
  | f=Fator()
    {return new FinalExpressao(f);}
}


// FATOR -> TOKEN_id | TOKEN_id "(" LISTAEXP? ")"
// | TOKEN_numliteral |
// "true" | "false"
Fator Fator () :
{
  Token t;
  ArrayList<Expressao> listaExp = new ArrayList();
}
{
    t=<ID> [<APAR> ListaExp(listaExp) <FPAR> 
            {return new FuncaoCall(t.image, listaExp);}]
    {return new Variavel(t.image);}
  |  t=<NUM>
    {
      return new Num(t.image);
    }
  | <BTRUE> {return new True();}
  | <BFALSE> {return new False();}

}

// OP -> "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
Operador Op () :
{Token t;}
{

  t=<OP> {return new Operador(t.image);}

}

// LISTAEXP -> EXP | LISTAEXP "," EXP
void ListaExp (ArrayList<Expressao> listaExp) :
{
  Expressao exp;
}
{

    exp=Exp() {listaExp.add(exp);} [ListaExpL(listaExp)]

}

void ListaExpL (ArrayList<Expressao> listaExp) :
{
  Expressao exp;
}
{

  <COMMA> exp=Exp() {listaExp.add(exp);} [ListaExpL(listaExp)]

}

// FUNC -> FUNC "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// | "func" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
void Func (ArrayList<Funcao> funcoes) :
{
  Tipo tipo_retorno;
  Token t;
  ArrayList<Argumento> argumentos = new ArrayList();
  ArrayList<Variavel> variaveis = new ArrayList();
  ArrayList<Comando> comandos = new ArrayList();
}
{

  (
    <FUNC> tipo_retorno=Tipo() t=<ID> <APAR> ListaArg(argumentos) <FPAR> <ACHAVES> VarDecl(variaveis) SeqComandos(comandos) <FCHAVES> 
    {funcoes.add(new Funcao(t.image, tipo_retorno, argumentos, variaveis, comandos));}
  )*

}

// LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
void ListaArg (ArrayList<Argumento> argumentos) :
{
  Token t;
  Tipo tipo;
}
{

    (tipo=Tipo() t=<ID> {argumentos.add(new Argumento(t.image, tipo));} (<COMMA> tipo=Tipo() t=<ID> {argumentos.add(new Argumento(t.image, tipo));})*)*

}
